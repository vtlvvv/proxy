events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;
    
    # Enable detailed logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;
    
    server {
        listen 80;
        resolver 8.8.8.8 valid=300s ipv6=off;
        
        # Health check
        location = /health {
            return 200 '{"status":"ok"}';
            add_header Content-Type application/json;
        }
        
        # Proxy all API requests
        location /api/ {
            # Critical: Use the exact upstream URL without trailing slash
            proxy_pass https://developers.hostinger.com/api/;
            
            # Force HTTP/1.1 and proper connection handling
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Essential headers for API
            proxy_set_header Host developers.hostinger.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Preserve all client headers (including Authorization)
            proxy_pass_request_headers on;
            proxy_pass_request_body on;
            
            # SSL configuration
            proxy_ssl_server_name on;
            proxy_ssl_verify off;
            proxy_ssl_session_reuse off;
            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            
            # Disable buffering for real-time API responses
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Increased timeouts for API calls
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Handle upstream errors
            proxy_next_upstream error timeout http_502 http_503 http_504;
            proxy_intercept_errors off;
        }
        
        # Catch-all for non-API requests
        location / {
            return 404 '{"error":"Not found","path":"$request_uri"}';
            add_header Content-Type application/json;
        }
    }
}
